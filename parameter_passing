1. Pass by Value

In this method, a copy of the actual argument (value) is passed to the function. Changes made to the parameter within the function do not affect the original value.   
    a sample code
    def square(num):
  num = num * num
  return num

x = 5
result = square(x)
print("Original value:", x)  # Output: 5
print("Squared value:", result)  # Output: 25
2. Pass by Reference

In this method, the address of the actual argument is passed to the function. Any changes made to the parameter within the function affect the original value.
sample program in python
def demonstrate_parameter_passing(number, string, my_list):
  
  number *= 2
  print("Number inside function:", number)

 
  string += " World"
  print("String inside function:", string)

 
  my_list.append(4)
  print("List inside function:", my_list)

num = 10
str = "Hello"
list1 = [1, 2, 3]

demonstrate_parameter_passing(num, str, list1)

print("Number outside function:", num)  # Output: 10
print("String outside function:", str)  # Output: Hello
print("List outside function:", list1)  # Output: [1, 2, 3, 4]
 a general program
 def pass_by_value(num):
  """Demonstrates pass by value with an immutable type (int)."""
  num *= 2
  print("Inside function: num =", num)

def pass_by_reference(my_list):
  """Demonstrates pass by reference with a mutable type (list)."""
  my_list.append(4)
  print("Inside function: my_list =", my_list)

def main():
  # Pass by value
  x = 5
  pass_by_value(x)
  print("Outside function: x =", x)

  # Pass by reference
  my_list = [1, 2, 3]
  pass_by_reference(my_list)
  print("Outside function: my_list =", my_list)

if __name__ == "__main__":
  main()

